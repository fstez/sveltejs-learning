const BASE = (process.env.API_BASE || 'https://js.kristjankivikangur21.thkit.ee/')
    .replace(/\/+$/, '') + '/';

// унифицированный fetch
async function getFetch() {
    if (typeof fetch !== 'undefined') return fetch;
    const mod = await import('node-fetch');
    return mod.default || mod;
}

async function parseSmart(res) {
    const ct = res.headers.get('content-type') || '';
    if (ct.includes('application/json')) {
        try { return await res.json(); } catch { return null; }
    }
    return { __nonjson: true, text: await res.text().catch(() => '') };
}

async function send({ method, path, data, token }) {
    const fetch = await getFetch();
    const url = BASE + String(path).replace(/^\/+/, '');

    const headers = {};
    if (data !== undefined) headers['Content-Type'] = 'application/json';
    if (token) headers['Authorization'] = `Bearer ${token}`;

    const res = await fetch(url, {
        method,
        headers,
        body: data !== undefined ? JSON.stringify(data) : undefined
    });

    const body = await parseSmart(res);

    if (!res.ok) {
        const msg =
            (body?.__nonjson && body.text) ||
            (body?.message || body?.error) ||
            `${res.status} ${res.statusText}`;
        return { ok: false, errors: { server: msg } };
    }

    if (body?.__nonjson) return { ok: false, errors: { server: body.text || 'Invalid response' } };
    return { ok: true, ...body };
}

export const get = (path, token) => send({ method: 'GET', path, token });
export const del = (path, token) => send({ method: 'DELETE', path, token });
export const post = (path, data, token) => send({ method: 'POST', path, data, token });
export const put = (path, data, token) => send({ method: 'PUT', path, data, token });
